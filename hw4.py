# -*- coding: utf-8 -*-
"""hw4_computing_for_ds_with_task_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJ9jWGQoVVX5LGA0MmDqDMLapmUSc-4t
"""

##### Try to use map and reduce in the next 3 exercises
# 1)
# Create a function called "count_simba" that counts and returns
# the number of times that Simba appears in a list of
# strings. Example:
# ["Simba and Nala are lions.", "I laugh in the face of danger.",
#  "Hakuna matata", "Timon, Pumba and Simba are friends, but Simba could eat the other two."]
#
from functools import reduce

def count_simba(strings):
    counts = map(lambda s: s.count("Simba"), strings)
    return reduce(lambda a, b: a + b, counts, 0)

# 2)
# Create a function called "get_day_month_year" that takes
# a list of datetimes.date and returns a pandas dataframe
# with 3 columns (day, month, year) in which each of the rows
# is an element of the input list and has as value its
# day, month, and year.
#


def get_day_month_year(dates):
    dates_into_columns = map(lambda d: (d.day, d.month, d.year), dates)
    return pd.DataFrame(dates_into_columns, columns=["day", "month", "year"])

# 3)
# Create a function called "compute_distance" that takes
# a list of tuple pairs with latitude and longitude coordinates and
# returns a list with the distance between the two pairs
# example input: [((41.23,23.5), (41.5, 23.4)), ((52.38, 20.1),(52.3, 17.8))]
# HINT: You can use geopy.distance in order to compute the distance
#

from geopy.distance import distance

def compute_distance(pairs):
    return list(map(lambda p: distance(p[0], p[1]).km, pairs))

#################################################
# 4)
# Consider a list that each element can be an integer or
# a list that contains integers or more lists with integers
# example: [[2], 4, 5, [1, [2], [3, 5, [7,8]], 10], 1].
# create a recursive function called "sum_general_int_list"
# that takes as input this type of list
# and returns the sum of all the integers within the lists
# for instance for list_1=[[2], 3, [[1,2],5]]
# the result should be 13
#
from functools import reduce

def sum_general_int_list(lst):
    return reduce(
        lambda acc, x: acc + (x if isinstance(x, int)
        else sum_general_int_list(x)),
        lst,
        0
    )